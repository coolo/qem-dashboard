% layout 'default', title => 'Vue Experiment';
%= asset 'vue.js'

<div id="app">
 <div class="row">
   <div class="col-md-12">
    <table class="table">
      <thead>
        <tr>
          <th>Incident</th>
          <th>Groups</th>
        </tr>
      </thead>
      <tbody>
        <tr is="blocked-incident"
         v-for="incident in incidents"
         v-bind:key="incident.incident.number"
         v-bind:incident_nr="incident.incident.number"
         v-bind:incident_url="'/incident/' + incident.incident.number"
         v-bind:package_name="incident.incident.packages[0]"
         v-bind:incident_results="incident.incident_results"
         v-bind:update_results="incident.update_results"
            >
        </tr>
      </tbody>
    </table>
  </div>
 </div>
</div>


<script type="text/x-template" id="blocked-incident-inc-result-template">
  <li v-bind:data-group-id="group_id" >
    <result-summary v-bind:result="result"></result-summary>
  </li>
</script>

<script type="text/x-template" id="result-summary-template">
  <a v-if="result_failed > 0" v-bind:href="result_link" class="btn btn-danger" target="_blank">
     {{ result.name }} <span class="badge badge-light">{{ result_failed }}/{{ total }}</span>
     <span class="sr-only">failed jobs</span>
  </a>
  <a v-else-if="result_stopped > 0" v-bind:href="result_link" class="btn btn-secondary" target="_blank">
    {{ result.name }} <span class="badge badge-light">{{ result_stopped }}/{{ total }}</span>
    <span class="sr-only">stopped jobs</span>
  </a>
  <a v-else-if="result_waiting > 0" v-bind:href="result_link" class="btn btn-info" target="_blank">
    {{ result.name }} <span class="badge badge-light">{{ result_waiting }}/{{ total }}</span>
    <span class="sr-only">stopped jobs</span>
  </a>
  <a v-else-if="result_passed == total" v-bind:href="result_link" class="btn btn-success" target="_blank">
    {{ result.name }} <span class="badge badge-light">{{ total }}</span>
    <span class="sr-only">passed jobs</span>
  </a>
  <a v-else>
     {{ result.name }} is problematic
  </a>
</script>

<script type="text/x-template" id="blocked-incident-upd-result-template">
<li v-bind:group-id="group_id"
    data-toggle="tooltip"
    data-placement="left"
    v-bind:title="title">
  <result-summary v-bind:result="result"></result-summary>
</li>
</script>

<script type="text/x-template" id="blocked-incident-template">
 <tr>
   <td>
    <a v-bind:name="incident_nr" />
    <a class="incident-link" v-bind:href="incident_url">{{incident_nr}}:{{package_name}}</a>
    </td>
    <td>
      <div v-if="Object.keys(incident_results).length + Object.keys(update_results).length === 0">
         No data yet
      </div>
      <ul v-else class="summary-list">
        <li is="blocked-incident-inc-result"
            v-for="(result, group_id) in incident_results"
            v-bind:key="group_id"
            v-bind:group_id="group_id"
            v-bind:result="result"
           >
        </li>
        <li is="blocked-incident-upd-result"
           v-for="(result, group_id) in update_results"
           v-bind:key="group_id"
           v-bind:group_id="group_id"
           v-bind:result="result"
           >
        </li>
      </ul>
    </td>
  </tr>
</script>

%= javascript begin

Vue.component('blocked-incident-inc-result', {
  template: '#blocked-incident-inc-result-template',
  props: ['result', 'group_id'],
})

Vue.component('result-summary', {
  template: '#result-summary-template',
  props: ['result'],
  computed: {
    result_link: function() {
      var url = "<%= $c->openqa_url->path('/tests/overview') %>";
      const searchParams = new URLSearchParams(this.result.linkinfo);
      return url + "?" + searchParams.toString();
    },
    result_stopped: function() {
      return this.result.stopped || 0;
    },
    result_passed: function() {
      return this.result.passed || 0;
    },
    result_waiting: function() {
      return this.result.waiting || 0;
    },
    result_failed: function() {
      return this.result.failed || 0;
    },
    total: function() {
      return this.result_stopped + this.result_failed + this.result_waiting + this.result_passed;
    }
  }
})

Vue.component('blocked-incident-upd-result', {
  template: '#blocked-incident-upd-result-template',
  props: ['result', 'group_id'],
  computed: {
    title: function() {
      return "Aggregate: " + this.result.linkinfo.flavor + "-" + this.result.linkinfo.version;
    },
  }
})

Vue.component('blocked-incident', {
  template: '#blocked-incident-template',
  props: ['incident_nr', 'incident_url', 'package_name', 'incident_results', 'update_results']
})

var app = new Vue({
  el: '#app',
  created: function() {
    this.getBlocked();
  },
  data: {  
     incidents: []
   },
  methods: {
    getBlocked: function(area) {
      var self = this;
      axios.get('/blocked').then(
        function(response) {
          self.incidents = response.data;
        }
      );
    },
  }
});
% end
