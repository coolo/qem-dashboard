% layout 'default', title => 'Active Incidents';

% content_for head_javascript => begin
 function incident_is_testing(incident) {
   return incident.rr_number > 0 && incident.approved == 0;
 }
 function incident_is_staged(incident) {
   return !incident.rr_number && incident.approved == 0;
 }
% end

<div id="app">
 <div class="row">
   <div class="col-md-12">
    <table class="table">
      <thead>
        <tr>
          <th>Incident</th>
          <th>State</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="incident in testing_incidents" v-bind:blocked_url="blocked_url">
            <td><incident-link v-bind:incident="incident"></incident-link></td>
            <td>
              <a v-bind:href="blocked_url + '#' + incident.number">
                <span class="badge badge-primary">testing</span>
              </a>
            </td>
          </tr>
          <tr v-for="incident in staged_incidents">
            <td><incident-link v-bind:incident="incident"></incident-link></td>
            <td><span class="badge badge-secondary">staged</span></td>
          </tr>
      </tbody>
    </table>
  </div>
 </div>
</div>

%= javascript begin

var app = new Vue({
  el: '#app',
  created: function() {
    this.getBlocked();
    this.timer = setInterval(this.getBlocked, 10 * 60000);
  },
  data: {
     incidents: []
  },
  computed: {
    testing_incidents: function() { return this.incidents.filter(incident_is_testing) },
    staged_incidents: function() { return this.incidents.filter(incident_is_staged) },
    blocked_url: function() { return blocked_url } 
  },
  methods: {
    getBlocked: function() {
      axios.get('/').then(response => self.incidents = response.data);
    },
    cancelAutoUpdate () {
      clearInterval(this.timer);
    }
  },
  beforeDestroy () {
    this.cancelAutoUpdate();
  }
});
% end
